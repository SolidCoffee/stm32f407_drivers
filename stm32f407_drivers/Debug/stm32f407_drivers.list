
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001654  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017fc  080017fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080017fc  080017fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017fc  080017fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017fc  080017fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001800  08001800  00011800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002155  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000585  00000000  00000000  00022191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00022718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000120  00000000  00000000  00022870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002698  00000000  00000000  00022990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b7d  00000000  00000000  00025028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ab6d  00000000  00000000  00026ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031712  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005ac  00000000  00000000  00031768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080017e4 	.word	0x080017e4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	080017e4 	.word	0x080017e4

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <GPIO_PLCK_Control>:
 * @return			-none
 *
 * @note			-none
 */
void GPIO_PLCK_Control(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d162      	bne.n	80008cc <GPIO_PLCK_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a64      	ldr	r2, [pc, #400]	; (800099c <GPIO_PLCK_Control+0x1a8>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PLCK_Control+0x28>
		{
			GPIOA_PCLK_EN();
 800080e:	4b64      	ldr	r3, [pc, #400]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a63      	ldr	r2, [pc, #396]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
			else if(pGPIOx == GPIOI)
			{
				GPIOI_PCLK_DI();
			}
	}
}
 800081a:	e0b9      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOB)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a61      	ldr	r2, [pc, #388]	; (80009a4 <GPIO_PLCK_Control+0x1b0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PLCK_Control+0x3e>
			GPIOB_PCLK_EN();
 8000824:	4b5e      	ldr	r3, [pc, #376]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a5d      	ldr	r2, [pc, #372]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000830:	e0ae      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOC)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a5c      	ldr	r2, [pc, #368]	; (80009a8 <GPIO_PLCK_Control+0x1b4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PLCK_Control+0x54>
			GPIOC_PCLK_EN();
 800083a:	4b59      	ldr	r3, [pc, #356]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a58      	ldr	r2, [pc, #352]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000846:	e0a3      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOD)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a58      	ldr	r2, [pc, #352]	; (80009ac <GPIO_PLCK_Control+0x1b8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <GPIO_PLCK_Control+0x6a>
			GPIOD_PCLK_EN();
 8000850:	4b53      	ldr	r3, [pc, #332]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a52      	ldr	r2, [pc, #328]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085c:	e098      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOE)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a53      	ldr	r2, [pc, #332]	; (80009b0 <GPIO_PLCK_Control+0x1bc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <GPIO_PLCK_Control+0x80>
			GPIOE_PCLK_EN();
 8000866:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4d      	ldr	r2, [pc, #308]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000872:	e08d      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOF)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a4f      	ldr	r2, [pc, #316]	; (80009b4 <GPIO_PLCK_Control+0x1c0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <GPIO_PLCK_Control+0x96>
			GPIOF_PCLK_EN();
 800087c:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a47      	ldr	r2, [pc, #284]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000888:	e082      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOG)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a4a      	ldr	r2, [pc, #296]	; (80009b8 <GPIO_PLCK_Control+0x1c4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <GPIO_PLCK_Control+0xac>
			GPIOG_PCLK_EN();
 8000892:	4b43      	ldr	r3, [pc, #268]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a42      	ldr	r2, [pc, #264]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089e:	e077      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOH)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a46      	ldr	r2, [pc, #280]	; (80009bc <GPIO_PLCK_Control+0x1c8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <GPIO_PLCK_Control+0xc2>
			GPIOH_PCLK_EN();
 80008a8:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a3c      	ldr	r2, [pc, #240]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b4:	e06c      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		else if(pGPIOx == GPIOI)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a41      	ldr	r2, [pc, #260]	; (80009c0 <GPIO_PLCK_Control+0x1cc>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d168      	bne.n	8000990 <GPIO_PLCK_Control+0x19c>
			GPIOI_PCLK_EN();
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ca:	e061      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
		if(pGPIOx == GPIOA)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <GPIO_PLCK_Control+0x1a8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d106      	bne.n	80008e2 <GPIO_PLCK_Control+0xee>
				GPIOA_PCLK_DI();
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008da:	f023 0301 	bic.w	r3, r3, #1
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008e0:	e056      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOB)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <GPIO_PLCK_Control+0x1b0>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d106      	bne.n	80008f8 <GPIO_PLCK_Control+0x104>
				GPIOB_PCLK_DI();
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 80008f0:	f023 0302 	bic.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f6:	e04b      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOC)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <GPIO_PLCK_Control+0x1b4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d106      	bne.n	800090e <GPIO_PLCK_Control+0x11a>
				GPIOC_PCLK_DI();
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000906:	f023 0304 	bic.w	r3, r3, #4
 800090a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090c:	e040      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOD)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a26      	ldr	r2, [pc, #152]	; (80009ac <GPIO_PLCK_Control+0x1b8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d106      	bne.n	8000924 <GPIO_PLCK_Control+0x130>
				GPIOD_PCLK_DI();
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800091c:	f023 0308 	bic.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000922:	e035      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <GPIO_PLCK_Control+0x1bc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d106      	bne.n	800093a <GPIO_PLCK_Control+0x146>
				GPIOE_PCLK_DI();
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000932:	f023 0310 	bic.w	r3, r3, #16
 8000936:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000938:	e02a      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOF)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <GPIO_PLCK_Control+0x1c0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d106      	bne.n	8000950 <GPIO_PLCK_Control+0x15c>
				GPIOF_PCLK_DI();
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000948:	f023 0320 	bic.w	r3, r3, #32
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094e:	e01f      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOG)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <GPIO_PLCK_Control+0x1c4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d106      	bne.n	8000966 <GPIO_PLCK_Control+0x172>
				GPIOG_PCLK_DI();
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800095e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000964:	e014      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOH)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <GPIO_PLCK_Control+0x1c8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d106      	bne.n	800097c <GPIO_PLCK_Control+0x188>
				GPIOH_PCLK_DI();
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097a:	e009      	b.n	8000990 <GPIO_PLCK_Control+0x19c>
			else if(pGPIOx == GPIOI)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <GPIO_PLCK_Control+0x1cc>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d105      	bne.n	8000990 <GPIO_PLCK_Control+0x19c>
				GPIOI_PCLK_DI();
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <GPIO_PLCK_Control+0x1ac>)
 800098a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40020000 	.word	0x40020000
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40021400 	.word	0x40021400
 80009b8:	40021800 	.word	0x40021800
 80009bc:	40021c00 	.word	0x40021c00
 80009c0:	40022000 	.word	0x40022000

080009c4 <GPIO_Init>:
 * @return			-none
 *
 * @note			-Wrote this code differently than the instructor, also made some corrections to his code
 */
void GPIO_Init(GPIO_Handler_t *pGPIOHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

		 //enable the peripheral clock

	 	 GPIO_PLCK_Control(pGPIOHandle->pGPIOx, ENABLE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff0c 	bl	80007f4 <GPIO_PLCK_Control>

		//1 . configure the mode of gpio pin

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= ANALOG)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d820      	bhi.n	8000a26 <GPIO_Init+0x62>
		{
			//the non interrupt mode
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2103      	movs	r1, #3
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	400a      	ands	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e0cb      	b.n	8000bbe <GPIO_Init+0x1fa>

		}else
		{
			//this part will code later . ( interrupt mode)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==FALLEDGE )
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	795b      	ldrb	r3, [r3, #5]
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d117      	bne.n	8000a5e <GPIO_Init+0x9a>
			{
				//1. configure the FTSR
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a2e:	4b4b      	ldr	r3, [pc, #300]	; (8000b5c <GPIO_Init+0x198>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	7912      	ldrb	r2, [r2, #4]
 8000a36:	4611      	mov	r1, r2
 8000a38:	2201      	movs	r2, #1
 8000a3a:	408a      	lsls	r2, r1
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a47      	ldr	r2, [pc, #284]	; (8000b5c <GPIO_Init+0x198>)
 8000a40:	430b      	orrs	r3, r1
 8000a42:	6093      	str	r3, [r2, #8]
				//Clear the corresponding RTSR bit
				EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a44:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <GPIO_Init+0x198>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7912      	ldrb	r2, [r2, #4]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	2201      	movs	r2, #1
 8000a50:	408a      	lsls	r2, r1
 8000a52:	43d2      	mvns	r2, r2
 8000a54:	4611      	mov	r1, r2
 8000a56:	4a41      	ldr	r2, [pc, #260]	; (8000b5c <GPIO_Init+0x198>)
 8000a58:	400b      	ands	r3, r1
 8000a5a:	60d3      	str	r3, [r2, #12]
 8000a5c:	e035      	b.n	8000aca <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==RISEEDGE )
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d117      	bne.n	8000a96 <GPIO_Init+0xd2>
			{
				//1 . configure the RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <GPIO_Init+0x198>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	7912      	ldrb	r2, [r2, #4]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	2201      	movs	r2, #1
 8000a72:	408a      	lsls	r2, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <GPIO_Init+0x198>)
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	60d3      	str	r3, [r2, #12]
				//Clear the corresponding RTSR bit
				EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a7c:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <GPIO_Init+0x198>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	7912      	ldrb	r2, [r2, #4]
 8000a84:	4611      	mov	r1, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	408a      	lsls	r2, r1
 8000a8a:	43d2      	mvns	r2, r2
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <GPIO_Init+0x198>)
 8000a90:	400b      	ands	r3, r1
 8000a92:	6093      	str	r3, [r2, #8]
 8000a94:	e019      	b.n	8000aca <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == RFT )
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d115      	bne.n	8000aca <GPIO_Init+0x106>
			{
				//1. configure both FTSR and RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <GPIO_Init+0x198>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	7912      	ldrb	r2, [r2, #4]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a2b      	ldr	r2, [pc, #172]	; (8000b5c <GPIO_Init+0x198>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	60d3      	str	r3, [r2, #12]
				//Clear the corresponding RTSR bit
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <GPIO_Init+0x198>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	7912      	ldrb	r2, [r2, #4]
 8000abc:	4611      	mov	r1, r2
 8000abe:	2201      	movs	r2, #1
 8000ac0:	408a      	lsls	r2, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <GPIO_Init+0x198>)
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6093      	str	r3, [r2, #8]
			}

			//2. configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <GPIO_Init+0x19c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d04e      	beq.n	8000b84 <GPIO_Init+0x1c0>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <GPIO_Init+0x1a0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d032      	beq.n	8000b56 <GPIO_Init+0x192>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <GPIO_Init+0x1a4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d02b      	beq.n	8000b52 <GPIO_Init+0x18e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <GPIO_Init+0x1a8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d024      	beq.n	8000b4e <GPIO_Init+0x18a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <GPIO_Init+0x1ac>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d01d      	beq.n	8000b4a <GPIO_Init+0x186>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <GPIO_Init+0x1b0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d016      	beq.n	8000b46 <GPIO_Init+0x182>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <GPIO_Init+0x1b4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d00f      	beq.n	8000b42 <GPIO_Init+0x17e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <GPIO_Init+0x1b8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d008      	beq.n	8000b3e <GPIO_Init+0x17a>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <GPIO_Init+0x1bc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <GPIO_Init+0x176>
 8000b36:	2308      	movs	r3, #8
 8000b38:	e025      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e023      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b3e:	2307      	movs	r3, #7
 8000b40:	e021      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b42:	2306      	movs	r3, #6
 8000b44:	e01f      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b46:	2305      	movs	r3, #5
 8000b48:	e01d      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	e01b      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e019      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b52:	2302      	movs	r3, #2
 8000b54:	e017      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e015      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b5a:	bf00      	nop
 8000b5c:	40013c00 	.word	0x40013c00
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40021400 	.word	0x40021400
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40021c00 	.word	0x40021c00
 8000b80:	40022000 	.word	0x40022000
 8000b84:	2300      	movs	r3, #0
 8000b86:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 8000b88:	4b59      	ldr	r3, [pc, #356]	; (8000cf0 <GPIO_Init+0x32c>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	4a58      	ldr	r2, [pc, #352]	; (8000cf0 <GPIO_Init+0x32c>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000b94:	7c7a      	ldrb	r2, [r7, #17]
 8000b96:	7cbb      	ldrb	r3, [r7, #18]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	fa02 f103 	lsl.w	r1, r2, r3
 8000b9e:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <GPIO_Init+0x330>)
 8000ba0:	7cfb      	ldrb	r3, [r7, #19]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			//3 . enable the exti interrupt delivery using IMR
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000ba8:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <GPIO_Init+0x334>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	7912      	ldrb	r2, [r2, #4]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	408a      	lsls	r2, r1
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4a4f      	ldr	r2, [pc, #316]	; (8000cf8 <GPIO_Init+0x334>)
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	6013      	str	r3, [r2, #0]
		}

		//2. configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	799b      	ldrb	r3, [r3, #6]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2103      	movs	r1, #3
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4619      	mov	r1, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	400a      	ands	r2, r1
 8000bec:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6899      	ldr	r1, [r3, #8]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	609a      	str	r2, [r3, #8]

		//3. configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_pinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	79db      	ldrb	r3, [r3, #7]
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	791b      	ldrb	r3, [r3, #4]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68d9      	ldr	r1, [r3, #12]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	60da      	str	r2, [r3, #12]


		//4. configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7a1b      	ldrb	r3, [r3, #8]
 8000c42:	461a      	mov	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	408b      	lsls	r3, r1
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	400a      	ands	r2, r1
 8000c68:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6859      	ldr	r1, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	605a      	str	r2, [r3, #4]

		//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == ALTFUNC)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	795b      	ldrb	r3, [r3, #5]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d131      	bne.n	8000ce6 <GPIO_Init+0x322>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	7c3a      	ldrb	r2, [r7, #16]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	7c3a      	ldrb	r2, [r7, #16]
 8000cb4:	4001      	ands	r1, r0
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	7c3a      	ldrb	r2, [r7, #16]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7a5b      	ldrb	r3, [r3, #9]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	7c3a      	ldrb	r2, [r7, #16]
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40013c00 	.word	0x40013c00

08000cfc <ServoHandle>:
uint32_t y=10;
uint32_t j=10;
uint32_t checker=0;

void ServoHandle(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

	if(UD_Inc_Flg)
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <ServoHandle+0x154>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d014      	beq.n	8000d32 <ServoHandle+0x36>
	{
		x++;
 8000d08:	4b52      	ldr	r3, [pc, #328]	; (8000e54 <ServoHandle+0x158>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <ServoHandle+0x158>)
 8000d10:	6013      	str	r3, [r2, #0]
		x=EdgeCondition(x);
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <ServoHandle+0x158>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fb3e 	bl	8001398 <EdgeCondition>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <ServoHandle+0x158>)
 8000d20:	6013      	str	r3, [r2, #0]
		ServoAngle(TIM4, x, MID);
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <ServoHandle+0x158>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2201      	movs	r2, #1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	484b      	ldr	r0, [pc, #300]	; (8000e58 <ServoHandle+0x15c>)
 8000d2c:	f000 fcf0 	bl	8001710 <ServoAngle>
 8000d30:	e017      	b.n	8000d62 <ServoHandle+0x66>
	}
	else if(UD_Dec_Flg)
 8000d32:	4b4a      	ldr	r3, [pc, #296]	; (8000e5c <ServoHandle+0x160>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d013      	beq.n	8000d62 <ServoHandle+0x66>
	{
		x--;
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <ServoHandle+0x158>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	4a44      	ldr	r2, [pc, #272]	; (8000e54 <ServoHandle+0x158>)
 8000d42:	6013      	str	r3, [r2, #0]
		x=EdgeCondition(x);
 8000d44:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <ServoHandle+0x158>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fb25 	bl	8001398 <EdgeCondition>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a40      	ldr	r2, [pc, #256]	; (8000e54 <ServoHandle+0x158>)
 8000d52:	6013      	str	r3, [r2, #0]
		ServoAngle(TIM4, x, MID);
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <ServoHandle+0x158>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	483e      	ldr	r0, [pc, #248]	; (8000e58 <ServoHandle+0x15c>)
 8000d5e:	f000 fcd7 	bl	8001710 <ServoAngle>
	}
	UD_Inc_Flg=0; UD_Dec_Flg=0;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <ServoHandle+0x154>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <ServoHandle+0x160>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]

	if(LR_Inc_Flg)
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <ServoHandle+0x164>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d014      	beq.n	8000da0 <ServoHandle+0xa4>
	{
		y++;
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <ServoHandle+0x168>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a39      	ldr	r2, [pc, #228]	; (8000e64 <ServoHandle+0x168>)
 8000d7e:	6013      	str	r3, [r2, #0]
		y=EdgeCondition(y);
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <ServoHandle+0x168>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb07 	bl	8001398 <EdgeCondition>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a35      	ldr	r2, [pc, #212]	; (8000e64 <ServoHandle+0x168>)
 8000d8e:	6013      	str	r3, [r2, #0]
		ServoAngle(TIM4, y, BOTTOM);
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <ServoHandle+0x168>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2202      	movs	r2, #2
 8000d96:	4619      	mov	r1, r3
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <ServoHandle+0x15c>)
 8000d9a:	f000 fcb9 	bl	8001710 <ServoAngle>
 8000d9e:	e017      	b.n	8000dd0 <ServoHandle+0xd4>
	}
	else if(LR_Dec_Flg)
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <ServoHandle+0x16c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <ServoHandle+0xd4>
	{
		y--;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <ServoHandle+0x168>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <ServoHandle+0x168>)
 8000db0:	6013      	str	r3, [r2, #0]
		y=EdgeCondition(y);
 8000db2:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <ServoHandle+0x168>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 faee 	bl	8001398 <EdgeCondition>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <ServoHandle+0x168>)
 8000dc0:	6013      	str	r3, [r2, #0]
		ServoAngle(TIM4, y, BOTTOM);
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <ServoHandle+0x168>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <ServoHandle+0x15c>)
 8000dcc:	f000 fca0 	bl	8001710 <ServoAngle>
	}
	LR_Inc_Flg=0; LR_Dec_Flg=0;
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <ServoHandle+0x164>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <ServoHandle+0x16c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

	if(Wrist_Inc_Flg)
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <ServoHandle+0x170>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d014      	beq.n	8000e0e <ServoHandle+0x112>
	{
		j++;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <ServoHandle+0x174>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <ServoHandle+0x174>)
 8000dec:	6013      	str	r3, [r2, #0]
		j=EdgeCondition(j);
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <ServoHandle+0x174>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fad0 	bl	8001398 <EdgeCondition>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <ServoHandle+0x174>)
 8000dfc:	6013      	str	r3, [r2, #0]
		ServoAngle(TIM4, j,TOP);
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <ServoHandle+0x174>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2203      	movs	r2, #3
 8000e04:	4619      	mov	r1, r3
 8000e06:	4814      	ldr	r0, [pc, #80]	; (8000e58 <ServoHandle+0x15c>)
 8000e08:	f000 fc82 	bl	8001710 <ServoAngle>
 8000e0c:	e017      	b.n	8000e3e <ServoHandle+0x142>
	}
	else if(Wrist_Dec_Flg)
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <ServoHandle+0x178>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d013      	beq.n	8000e3e <ServoHandle+0x142>
	{
		j--;
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <ServoHandle+0x174>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <ServoHandle+0x174>)
 8000e1e:	6013      	str	r3, [r2, #0]
		j=EdgeCondition(j);
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <ServoHandle+0x174>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fab7 	bl	8001398 <EdgeCondition>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <ServoHandle+0x174>)
 8000e2e:	6013      	str	r3, [r2, #0]
		ServoAngle(TIM4, j,TOP);
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <ServoHandle+0x174>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2203      	movs	r2, #3
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <ServoHandle+0x15c>)
 8000e3a:	f000 fc69 	bl	8001710 <ServoAngle>
	}
	Wrist_Inc_Flg=0; Wrist_Dec_Flg=0;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <ServoHandle+0x170>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <ServoHandle+0x178>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000028 	.word	0x20000028
 8000e54:	20000000 	.word	0x20000000
 8000e58:	40000800 	.word	0x40000800
 8000e5c:	2000002d 	.word	0x2000002d
 8000e60:	2000002c 	.word	0x2000002c
 8000e64:	20000004 	.word	0x20000004
 8000e68:	2000002a 	.word	0x2000002a
 8000e6c:	20000029 	.word	0x20000029
 8000e70:	20000008 	.word	0x20000008
 8000e74:	2000002b 	.word	0x2000002b

08000e78 <GPIOInits>:

void GPIOInits(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
	GPIO_Handler_t ADCPins;

	ADCPins.pGPIOx = GPIOA;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <GPIOInits+0x4c>)
 8000e80:	607b      	str	r3, [r7, #4]

	ADCPins.GPIO_PinConfig.GPIO_PinMode = ANALOG;
 8000e82:	2303      	movs	r3, #3
 8000e84:	727b      	strb	r3, [r7, #9]
	ADCPins.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	737b      	strb	r3, [r7, #13]
	ADCPins.GPIO_PinConfig.GPIO_PinOPType = PUSHPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	733b      	strb	r3, [r7, #12]
	ADCPins.GPIO_PinConfig.GPIO_pinPuPdControl = NOPUPD;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	72fb      	strb	r3, [r7, #11]
	ADCPins.GPIO_PinConfig.GPIO_PinSpeed = SPEEDHIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	72bb      	strb	r3, [r7, #10]

	//PWM Pin config
	ADCPins.GPIO_PinConfig.GPIO_PinNumber = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ADCPins);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd91 	bl	80009c4 <GPIO_Init>

	ADCPins.GPIO_PinConfig.GPIO_PinNumber = 3;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ADCPins);
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fd8b 	bl	80009c4 <GPIO_Init>

	ADCPins.GPIO_PinConfig.GPIO_PinNumber = 5;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ADCPins);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd85 	bl	80009c4 <GPIO_Init>

	//ADCPins.GPIO_PinConfig.GPIO_PinNumber = 7;
	//GPIO_Init(&ADCPins);
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <PWM_GPIOInits>:

void PWM_GPIOInits(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
	GPIO_Handler_t PWMPins;

	PWMPins.pGPIOx = GPIOB;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <PWM_GPIOInits+0x4c>)
 8000ed0:	607b      	str	r3, [r7, #4]

	PWMPins.GPIO_PinConfig.GPIO_PinMode = ALTFUNC;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	727b      	strb	r3, [r7, #9]
	PWMPins.GPIO_PinConfig.GPIO_PinAltFunMode = AF2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	737b      	strb	r3, [r7, #13]
	PWMPins.GPIO_PinConfig.GPIO_PinOPType = PUSHPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	733b      	strb	r3, [r7, #12]
	PWMPins.GPIO_PinConfig.GPIO_pinPuPdControl = NOPUPD;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	72fb      	strb	r3, [r7, #11]
	PWMPins.GPIO_PinConfig.GPIO_PinSpeed = SPEEDHIGH;  //might need to look into this
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	72bb      	strb	r3, [r7, #10]

	//PWM Pin config
	PWMPins.GPIO_PinConfig.GPIO_PinNumber = 6;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&PWMPins);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fd69 	bl	80009c4 <GPIO_Init>

	PWMPins.GPIO_PinConfig.GPIO_PinNumber = 7;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&PWMPins);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fd63 	bl	80009c4 <GPIO_Init>

	PWMPins.GPIO_PinConfig.GPIO_PinNumber = 8;
 8000efe:	2308      	movs	r3, #8
 8000f00:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&PWMPins);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fd5d 	bl	80009c4 <GPIO_Init>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020400 	.word	0x40020400

08000f18 <PWMTIM>:

void PWMTIM(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
	TIM_Handler_t TIMPWM;

	TIMPWM.pTIMx = TIM4;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <PWMTIM+0x54>)
 8000f20:	607b      	str	r3, [r7, #4]
	TIMPWM.TIM_Config.TIM_Direction = UPCNT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	757b      	strb	r3, [r7, #21]
	TIMPWM.TIM_Config.TIM_ARR = 479;
 8000f26:	f240 13df 	movw	r3, #479	; 0x1df
 8000f2a:	60bb      	str	r3, [r7, #8]
	TIMPWM.TIM_Config.TIM_Prescaler = 99;
 8000f2c:	2363      	movs	r3, #99	; 0x63
 8000f2e:	81bb      	strh	r3, [r7, #12]
	TIMPWM.TIM_Config.TIM_Mode = EDGE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	753b      	strb	r3, [r7, #20]
	TIMPWM.TIM_Config.PWM_Mode = PWM1;
 8000f34:	2306      	movs	r3, #6
 8000f36:	75bb      	strb	r3, [r7, #22]
	TIMPWM.TIM_Config.TIM_RestPostion = DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
	TIMPWM.TIM_Config.TIM_Polarity = POLHIGH;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73bb      	strb	r3, [r7, #14]
	TIMPWM.TIM_Config.PWM_Channel = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]

	PWM2_5_Init(&TIMPWM);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fab0 	bl	80014ac <PWM2_5_Init>

	TIMPWM.TIM_Config.PWM_Channel = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	75fb      	strb	r3, [r7, #23]

	PWM2_5_Init(&TIMPWM);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 faaa 	bl	80014ac <PWM2_5_Init>

	TIMPWM.TIM_Config.PWM_Channel = 3;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	75fb      	strb	r3, [r7, #23]

	PWM2_5_Init(&TIMPWM);
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 faa4 	bl	80014ac <PWM2_5_Init>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40000800 	.word	0x40000800

08000f70 <main>:


int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	GPIOInits();
 8000f74:	f7ff ff80 	bl	8000e78 <GPIOInits>
	ADC_Clk_EnorDi(ADC1, ENABLE);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <main+0x38>)
 8000f7c:	f000 f86c 	bl	8001058 <ADC_Clk_EnorDi>
	PWM_GPIOInits();
 8000f80:	f7ff ffa2 	bl	8000ec8 <PWM_GPIOInits>
	TIM2_5_CLKEnable(TIM4, ENABLE); //Enables HSI and TIM3 peripheral clock
 8000f84:	2101      	movs	r1, #1
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <main+0x3c>)
 8000f88:	f000 fa1c 	bl	80013c4 <TIM2_5_CLKEnable>
	PWMTIM();
 8000f8c:	f7ff ffc4 	bl	8000f18 <PWMTIM>

	while(1)
	{
		ADC_Init_LR(ADC1);
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <main+0x38>)
 8000f92:	f000 f8bd 	bl	8001110 <ADC_Init_LR>

		ADC_Init_UD(ADC1);
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <main+0x38>)
 8000f98:	f000 f926 	bl	80011e8 <ADC_Init_UD>

		ADC_Wrist(ADC1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <main+0x38>)
 8000f9e:	f000 f98f 	bl	80012c0 <ADC_Wrist>

		ServoHandle();
 8000fa2:	f7ff feab 	bl	8000cfc <ServoHandle>
		ADC_Init_LR(ADC1);
 8000fa6:	e7f3      	b.n	8000f90 <main+0x20>
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	40000800 	.word	0x40000800

08000fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fde:	f000 fbdd 	bl	800179c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff ffc5 	bl	8000f70 <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   r0, =_estack
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff4:	08001804 	.word	0x08001804
  ldr r2, =_sbss
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ffc:	20000030 	.word	0x20000030

08001000 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>

08001002 <delay2>:
#include "stm32f407xx_ADC_driver.h"

void delay2(void)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 5000 ; i ++);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	e002      	b.n	8001014 <delay2+0x12>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3301      	adds	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f241 3287 	movw	r2, #4999	; 0x1387
 800101a:	4293      	cmp	r3, r2
 800101c:	d9f7      	bls.n	800100e <delay2+0xc>
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <delay1>:

void delay1(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 10000 ; i ++);
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e002      	b.n	800103e <delay1+0x12>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f242 720f 	movw	r2, #9999	; 0x270f
 8001044:	4293      	cmp	r3, r2
 8001046:	d9f7      	bls.n	8001038 <delay1+0xc>
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <ADC_Clk_EnorDi>:

void ADC_Clk_EnorDi(ADC_RegDef_t *pADCx, uint8_t EnorDi)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d120      	bne.n	80010ac <ADC_Clk_EnorDi+0x54>
	{
		if(pADCx == ADC1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <ADC_Clk_EnorDi+0xa8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d106      	bne.n	8001080 <ADC_Clk_EnorDi+0x28>
		{
			ADC1_CLK_EN();
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pADCx == ADC3)
		{
			ADC3_CLK_DI();
		}
	}
}
 800107e:	e038      	b.n	80010f2 <ADC_Clk_EnorDi+0x9a>
		else if(pADCx == ADC2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <ADC_Clk_EnorDi+0xb0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d106      	bne.n	8001096 <ADC_Clk_EnorDi+0x3e>
			ADC2_CLK_EN();
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001094:	e02d      	b.n	80010f2 <ADC_Clk_EnorDi+0x9a>
		else if(pADCx == ADC3)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <ADC_Clk_EnorDi+0xb4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d129      	bne.n	80010f2 <ADC_Clk_EnorDi+0x9a>
			ADC3_CLK_EN();
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010aa:	e022      	b.n	80010f2 <ADC_Clk_EnorDi+0x9a>
	else if(EnorDi==DISABLE)
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11f      	bne.n	80010f2 <ADC_Clk_EnorDi+0x9a>
		if(pADCx == ADC1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <ADC_Clk_EnorDi+0xa8>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d106      	bne.n	80010c8 <ADC_Clk_EnorDi+0x70>
			ADC1_CLK_DI();
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010c6:	e014      	b.n	80010f2 <ADC_Clk_EnorDi+0x9a>
		else if(pADCx == ADC2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <ADC_Clk_EnorDi+0xb0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d106      	bne.n	80010de <ADC_Clk_EnorDi+0x86>
			ADC2_CLK_DI();
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010da:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010dc:	e009      	b.n	80010f2 <ADC_Clk_EnorDi+0x9a>
		else if(pADCx == ADC3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <ADC_Clk_EnorDi+0xb4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d105      	bne.n	80010f2 <ADC_Clk_EnorDi+0x9a>
			ADC3_CLK_DI();
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <ADC_Clk_EnorDi+0xac>)
 80010ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40012000 	.word	0x40012000
 8001104:	40023800 	.word	0x40023800
 8001108:	40012100 	.word	0x40012100
 800110c:	40012200 	.word	0x40012200

08001110 <ADC_Init_LR>:
	//Disable ADC
	pADCHandle->CR2 &= ~(1 << 0);
}

void ADC_Init_LR(ADC_RegDef_t *pADCHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	//Enable ADC
	pADCHandle->CR2 |= (1 << 0);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]

	//continous conversion setting
	pADCHandle->CR2 |= (1 << 1);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f043 0202 	orr.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]

	//clearing channel
	pADCHandle->SQR3 &= ~(31 << 0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	f023 021f 	bic.w	r2, r3, #31
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	635a      	str	r2, [r3, #52]	; 0x34

	//Selecting channel
	pADCHandle->SQR3 |= (1 << 0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	635a      	str	r2, [r3, #52]	; 0x34

	//cycle edit
	pADCHandle->SMPR2 |= (0 << 4);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]

	//resolution
	pADCHandle->CR1 |= (1 << 24);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	605a      	str	r2, [r3, #4]

	//start conversion of regular channels
	pADCHandle->CR2 |= (1 << 30);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	609a      	str	r2, [r3, #8]

	delay2();
 8001168:	f7ff ff4b 	bl	8001002 <delay2>

	if(pADCHandle->DR > 900)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001174:	d903      	bls.n	800117e <ADC_Init_LR+0x6e>
	{
		LR_Inc_Flg=1;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <ADC_Init_LR+0xd0>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e025      	b.n	80011ca <ADC_Init_LR+0xba>
	}
	else if(pADCHandle->DR < 110)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	2b6d      	cmp	r3, #109	; 0x6d
 8001184:	d803      	bhi.n	800118e <ADC_Init_LR+0x7e>
	{
		LR_Dec_Flg=1;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <ADC_Init_LR+0xd4>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e01d      	b.n	80011ca <ADC_Init_LR+0xba>
	}
	else if((pADCHandle->DR < 400) && (pADCHandle->DR >= 200))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001196:	d209      	bcs.n	80011ac <ADC_Init_LR+0x9c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	2bc7      	cmp	r3, #199	; 0xc7
 800119e:	d905      	bls.n	80011ac <ADC_Init_LR+0x9c>
	{
		LR_Dec_Flg=1;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <ADC_Init_LR+0xd4>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
		delay1();
 80011a6:	f7ff ff41 	bl	800102c <delay1>
 80011aa:	e00e      	b.n	80011ca <ADC_Init_LR+0xba>
	}
	else if((pADCHandle->DR > 700) && (pADCHandle->DR <= 900))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80011b4:	d909      	bls.n	80011ca <ADC_Init_LR+0xba>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80011be:	d804      	bhi.n	80011ca <ADC_Init_LR+0xba>
	{
		LR_Inc_Flg=1;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <ADC_Init_LR+0xd0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		delay1();
 80011c6:	f7ff ff31 	bl	800102c <delay1>
	}
	//Disable ADC
	pADCHandle->CR2 &= ~(1 << 0);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f023 0201 	bic.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000002c 	.word	0x2000002c
 80011e4:	2000002a 	.word	0x2000002a

080011e8 <ADC_Init_UD>:

void ADC_Init_UD(ADC_RegDef_t *pADCHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	//Enable ADC
	pADCHandle->CR2 |= (1 << 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]

	//continous conversion setting
	pADCHandle->CR2 |= (1 << 1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]

	//clearing channel
	pADCHandle->SQR3 &= ~(31 << 0);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120c:	f023 021f 	bic.w	r2, r3, #31
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

	//Selecting channel
	pADCHandle->SQR3 |= (3 << 0);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	f043 0203 	orr.w	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	635a      	str	r2, [r3, #52]	; 0x34

	//cycle edit
	pADCHandle->SMPR2 |= (0 << 4);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	611a      	str	r2, [r3, #16]

	//resolution
	pADCHandle->CR1 |= (1 << 24);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]

	//start conversion of regular channels
	pADCHandle->CR2 |= (1 << 30);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]

	delay2();
 8001240:	f7ff fedf 	bl	8001002 <delay2>

	if(pADCHandle->DR > 900)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800124c:	d903      	bls.n	8001256 <ADC_Init_UD+0x6e>
	{
		UD_Inc_Flg=1;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <ADC_Init_UD+0xd0>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e025      	b.n	80012a2 <ADC_Init_UD+0xba>
	}
	else if(pADCHandle->DR < 110)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	2b6d      	cmp	r3, #109	; 0x6d
 800125c:	d803      	bhi.n	8001266 <ADC_Init_UD+0x7e>
	{
		UD_Dec_Flg=1;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <ADC_Init_UD+0xd4>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e01d      	b.n	80012a2 <ADC_Init_UD+0xba>
	}
	else if((pADCHandle->DR < 400) && (pADCHandle->DR >= 200))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800126e:	d209      	bcs.n	8001284 <ADC_Init_UD+0x9c>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	2bc7      	cmp	r3, #199	; 0xc7
 8001276:	d905      	bls.n	8001284 <ADC_Init_UD+0x9c>
	{
		UD_Dec_Flg=1;
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <ADC_Init_UD+0xd4>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
		delay1();
 800127e:	f7ff fed5 	bl	800102c <delay1>
 8001282:	e00e      	b.n	80012a2 <ADC_Init_UD+0xba>
	}
	else if((pADCHandle->DR > 700) && (pADCHandle->DR <= 900))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800128c:	d909      	bls.n	80012a2 <ADC_Init_UD+0xba>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001296:	d804      	bhi.n	80012a2 <ADC_Init_UD+0xba>
	{
		UD_Inc_Flg=1;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <ADC_Init_UD+0xd0>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
		delay1();
 800129e:	f7ff fec5 	bl	800102c <delay1>
	}
	//Disable ADC
	pADCHandle->CR2 &= ~(1 << 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f023 0201 	bic.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	609a      	str	r2, [r3, #8]
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000028 	.word	0x20000028
 80012bc:	2000002d 	.word	0x2000002d

080012c0 <ADC_Wrist>:

void ADC_Wrist(ADC_RegDef_t *pADCHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	//Enable ADC
	pADCHandle->CR2 |= (1 << 0);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]

	//continous conversion setting
	pADCHandle->CR2 |= (1 << 1);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]

	//clearing channel
	pADCHandle->SQR3 &= ~(31 << 0);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	f023 021f 	bic.w	r2, r3, #31
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34

	//Selecting channel
	pADCHandle->SQR3 |= (5 << 0);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	f043 0205 	orr.w	r2, r3, #5
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34

	//cycle edit
	pADCHandle->SMPR2 |= (0 << 4);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	611a      	str	r2, [r3, #16]

	//resolution
	pADCHandle->CR1 |= (1 << 24);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	605a      	str	r2, [r3, #4]

	//start conversion of regular channels
	pADCHandle->CR2 |= (1 << 30);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]

	delay2();
 8001318:	f7ff fe73 	bl	8001002 <delay2>

	if((pADCHandle->DR > 700) && (pADCHandle->DR <= 900))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001324:	d90a      	bls.n	800133c <ADC_Wrist+0x7c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800132e:	d805      	bhi.n	800133c <ADC_Wrist+0x7c>
	{
		Wrist_Inc_Flg=1;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <ADC_Wrist+0xd0>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
		delay1();
 8001336:	f7ff fe79 	bl	800102c <delay1>
 800133a:	e01e      	b.n	800137a <ADC_Wrist+0xba>
	}
	else if((pADCHandle->DR < 400) && (pADCHandle->DR >= 200))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001344:	d209      	bcs.n	800135a <ADC_Wrist+0x9a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	2bc7      	cmp	r3, #199	; 0xc7
 800134c:	d905      	bls.n	800135a <ADC_Wrist+0x9a>
	{
		Wrist_Dec_Flg=1;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <ADC_Wrist+0xd4>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
		delay1();
 8001354:	f7ff fe6a 	bl	800102c <delay1>
 8001358:	e00f      	b.n	800137a <ADC_Wrist+0xba>
	}
	else if(pADCHandle->DR < 110)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	2b6d      	cmp	r3, #109	; 0x6d
 8001360:	d803      	bhi.n	800136a <ADC_Wrist+0xaa>
	{
		Wrist_Dec_Flg=1;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <ADC_Wrist+0xd4>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e007      	b.n	800137a <ADC_Wrist+0xba>
	}
	else if(pADCHandle->DR > 900)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001372:	d902      	bls.n	800137a <ADC_Wrist+0xba>
	{
		Wrist_Inc_Flg=1;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <ADC_Wrist+0xd0>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
	}
	//Disable ADC
	pADCHandle->CR2 &= ~(1 << 0);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f023 0201 	bic.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000029 	.word	0x20000029
 8001394:	2000002b 	.word	0x2000002b

08001398 <EdgeCondition>:

uint32_t EdgeCondition(uint32_t val)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if(val >= 180){val=180;}
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2bb3      	cmp	r3, #179	; 0xb3
 80013a4:	d902      	bls.n	80013ac <EdgeCondition+0x14>
 80013a6:	23b4      	movs	r3, #180	; 0xb4
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e004      	b.n	80013b6 <EdgeCondition+0x1e>
	else if(val <= 10){val=10;}
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b0a      	cmp	r3, #10
 80013b0:	d801      	bhi.n	80013b6 <EdgeCondition+0x1e>
 80013b2:	230a      	movs	r3, #10
 80013b4:	607b      	str	r3, [r7, #4]
	return val;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <TIM2_5_CLKEnable>:
		}
	}
}

void TIM2_5_CLKEnable(TIM2_5_RegDef_t *pTIMx, uint8_t EnorDi)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
	RCC->AHB1ENR |= (1 << 0); // setting HSI on
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a31      	ldr	r2, [pc, #196]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
	if(EnorDi == ENABLE)
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d12b      	bne.n	800143a <TIM2_5_CLKEnable+0x76>
	{
		if(pTIMx == TIM3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a2e      	ldr	r2, [pc, #184]	; (80014a0 <TIM2_5_CLKEnable+0xdc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <TIM2_5_CLKEnable+0x34>
		{
			TIM3_CLK_EN(); //Enabling the TIM3 peripheral clock
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
		{
			TIM5_CLK_DI();
		}
	}

}
 80013f6:	e04b      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		else if(pTIMx == TIM4)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <TIM2_5_CLKEnable+0xe0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d106      	bne.n	800140e <TIM2_5_CLKEnable+0x4a>
			TIM4_CLK_EN();
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a25      	ldr	r2, [pc, #148]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800140c:	e040      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		else if(pTIMx == TIM2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d106      	bne.n	8001424 <TIM2_5_CLKEnable+0x60>
			TIM2_CLK_EN();
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001422:	e035      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		else if(pTIMx == TIM5)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <TIM2_5_CLKEnable+0xe4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d131      	bne.n	8001490 <TIM2_5_CLKEnable+0xcc>
			TIM5_CLK_EN();
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001438:	e02a      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		if(pTIMx == TIM3)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <TIM2_5_CLKEnable+0xdc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d106      	bne.n	8001450 <TIM2_5_CLKEnable+0x8c>
			TIM3_CLK_DI(); //Disabling the TIM3 peripheral clock
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001448:	f023 0302 	bic.w	r3, r3, #2
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800144e:	e01f      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		else if(pTIMx == TIM4)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <TIM2_5_CLKEnable+0xe0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d106      	bne.n	8001466 <TIM2_5_CLKEnable+0xa2>
			TIM4_CLK_DI();
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001464:	e014      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		else if(pTIMx == TIM2)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d106      	bne.n	800147c <TIM2_5_CLKEnable+0xb8>
			TIM2_CLK_DI();
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
}
 800147a:	e009      	b.n	8001490 <TIM2_5_CLKEnable+0xcc>
		else if(pTIMx == TIM5)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <TIM2_5_CLKEnable+0xe4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d105      	bne.n	8001490 <TIM2_5_CLKEnable+0xcc>
			TIM5_CLK_DI();
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <TIM2_5_CLKEnable+0xd8>)
 800148a:	f023 0308 	bic.w	r3, r3, #8
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40023800 	.word	0x40023800
 80014a0:	40000400 	.word	0x40000400
 80014a4:	40000800 	.word	0x40000800
 80014a8:	40000c00 	.word	0x40000c00

080014ac <PWM2_5_Init>:

void PWM2_5_Init(TIM_Handler_t *pTIMHandle)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	//CR1 peripheral setting

	pTIMHandle->pTIMx->CR1 |= (0 << 3); //clears the one pulse mode bit
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	601a      	str	r2, [r3, #0]
	pTIMHandle->pTIMx->CR1 |= (pTIMHandle->TIM_Config.TIM_Mode << 5); //Sets timer mode
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7c1b      	ldrb	r3, [r3, #16]
 80014ca:	015b      	lsls	r3, r3, #5
 80014cc:	4619      	mov	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
	pTIMHandle->pTIMx->CR1 |= (pTIMHandle->TIM_Config.TIM_Direction << 4); //sets direction
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c5b      	ldrb	r3, [r3, #17]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
	pTIMHandle->pTIMx->CR1 |= (1 << 7); // ARR register is buffered
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014fa:	601a      	str	r2, [r3, #0]

	//CCRM1
	if(pTIMHandle->TIM_Config.PWM_Channel == 1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7cdb      	ldrb	r3, [r3, #19]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d113      	bne.n	800152c <PWM2_5_Init+0x80>
	{
		pTIMHandle->pTIMx->CCMR1 |= (pTIMHandle->TIM_Config.PWM_Mode << 4);  //pwm mode config
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7c9b      	ldrb	r3, [r3, #18]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4619      	mov	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCMR1 |= (1 << 3); //Preload register on TIMx_CCR1 enabled.
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0208 	orr.w	r2, r2, #8
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	e046      	b.n	80015ba <PWM2_5_Init+0x10e>
	}
	else if(pTIMHandle->TIM_Config.PWM_Channel == 2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7cdb      	ldrb	r3, [r3, #19]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d113      	bne.n	800155c <PWM2_5_Init+0xb0>
	{
		pTIMHandle->pTIMx->CCMR1 |= (pTIMHandle->TIM_Config.PWM_Mode << 12);  //pwm mode config
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7c9b      	ldrb	r3, [r3, #18]
 800153e:	031b      	lsls	r3, r3, #12
 8001540:	4619      	mov	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCMR1 |= (1 << 11); //Preload register on TIMx_CCR1 enabled.
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001558:	619a      	str	r2, [r3, #24]
 800155a:	e02e      	b.n	80015ba <PWM2_5_Init+0x10e>
	}
	else if(pTIMHandle->TIM_Config.PWM_Channel == 3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7cdb      	ldrb	r3, [r3, #19]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d113      	bne.n	800158c <PWM2_5_Init+0xe0>
	{
		pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIM_Config.PWM_Mode << 4);  //pwm mode config
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7c9b      	ldrb	r3, [r3, #18]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4619      	mov	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCMR2 |= (1 << 3); //Preload register on TIMx_CCR1 enabled.
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0208 	orr.w	r2, r2, #8
 8001588:	61da      	str	r2, [r3, #28]
 800158a:	e016      	b.n	80015ba <PWM2_5_Init+0x10e>
	}
	else if(pTIMHandle->TIM_Config.PWM_Channel == 4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7cdb      	ldrb	r3, [r3, #19]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d112      	bne.n	80015ba <PWM2_5_Init+0x10e>
	{
		pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIM_Config.PWM_Mode << 12);  //pwm mode config
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7c9b      	ldrb	r3, [r3, #18]
 800159e:	031b      	lsls	r3, r3, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCMR2 |= (1 << 11); //Preload register on TIMx_CCR1 enabled.
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	69da      	ldr	r2, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015b8:	61da      	str	r2, [r3, #28]
	}

	//CCER
	if(pTIMHandle->TIM_Config.PWM_Channel == 1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7cdb      	ldrb	r3, [r3, #19]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d113      	bne.n	80015ea <PWM2_5_Init+0x13e>
	{
		pTIMHandle->pTIMx->CCER |= (pTIMHandle->TIM_Config.TIM_Polarity << 1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7a9b      	ldrb	r3, [r3, #10]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (1 << 0); //output enable
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6a1a      	ldr	r2, [r3, #32]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	621a      	str	r2, [r3, #32]
 80015e8:	e046      	b.n	8001678 <PWM2_5_Init+0x1cc>
	}
	else if(pTIMHandle->TIM_Config.PWM_Channel == 2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7cdb      	ldrb	r3, [r3, #19]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d113      	bne.n	800161a <PWM2_5_Init+0x16e>
	{
		pTIMHandle->pTIMx->CCER |= (pTIMHandle->TIM_Config.TIM_Polarity << 5);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7a9b      	ldrb	r3, [r3, #10]
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	4619      	mov	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (1 << 4); //output enable
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0210 	orr.w	r2, r2, #16
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	e02e      	b.n	8001678 <PWM2_5_Init+0x1cc>
	}
	else if(pTIMHandle->TIM_Config.PWM_Channel == 3)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7cdb      	ldrb	r3, [r3, #19]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d113      	bne.n	800164a <PWM2_5_Init+0x19e>
	{
		pTIMHandle->pTIMx->CCER |= (pTIMHandle->TIM_Config.TIM_Polarity << 9);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7a9b      	ldrb	r3, [r3, #10]
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	4619      	mov	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (1 << 8); //output enable
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001646:	621a      	str	r2, [r3, #32]
 8001648:	e016      	b.n	8001678 <PWM2_5_Init+0x1cc>
	}
	else if(pTIMHandle->TIM_Config.PWM_Channel == 4)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7cdb      	ldrb	r3, [r3, #19]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d112      	bne.n	8001678 <PWM2_5_Init+0x1cc>
	{
		pTIMHandle->pTIMx->CCER |= (pTIMHandle->TIM_Config.TIM_Polarity << 13);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7a9b      	ldrb	r3, [r3, #10]
 800165c:	035b      	lsls	r3, r3, #13
 800165e:	4619      	mov	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (1 << 12); //output enable
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001676:	621a      	str	r2, [r3, #32]
	}

	//Prescelar setting and ARR
	pTIMHandle->pTIMx->PSC = pTIMHandle->TIM_Config.TIM_Prescaler;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	891a      	ldrh	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
	pTIMHandle->pTIMx->ARR = pTIMHandle->TIM_Config.TIM_ARR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6852      	ldr	r2, [r2, #4]
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c


	//Rest postion of motor
	if(pTIMHandle->TIM_Config.TIM_RestPostion > 0)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d026      	beq.n	80016e2 <PWM2_5_Init+0x236>
	{
		if(pTIMHandle->TIM_Config.PWM_Channel == 1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7cdb      	ldrb	r3, [r3, #19]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <PWM2_5_Init+0x1fc>
		{
			pTIMHandle->pTIMx->CCR1 = pTIMHandle->TIM_Config.TIM_RestPostion;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68d2      	ldr	r2, [r2, #12]
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e01c      	b.n	80016e2 <PWM2_5_Init+0x236>
		}
		else if(pTIMHandle->TIM_Config.PWM_Channel == 2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7cdb      	ldrb	r3, [r3, #19]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d105      	bne.n	80016bc <PWM2_5_Init+0x210>
		{
			pTIMHandle->pTIMx->CCR2 = pTIMHandle->TIM_Config.TIM_RestPostion;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	68d2      	ldr	r2, [r2, #12]
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ba:	e012      	b.n	80016e2 <PWM2_5_Init+0x236>
		}
		else if(pTIMHandle->TIM_Config.PWM_Channel == 3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7cdb      	ldrb	r3, [r3, #19]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d105      	bne.n	80016d0 <PWM2_5_Init+0x224>
		{
			pTIMHandle->pTIMx->CCR3 = pTIMHandle->TIM_Config.TIM_RestPostion;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68d2      	ldr	r2, [r2, #12]
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ce:	e008      	b.n	80016e2 <PWM2_5_Init+0x236>
		}
		else if(pTIMHandle->TIM_Config.PWM_Channel == 4)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7cdb      	ldrb	r3, [r3, #19]
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d104      	bne.n	80016e2 <PWM2_5_Init+0x236>
		{
			pTIMHandle->pTIMx->CCR4 = pTIMHandle->TIM_Config.TIM_RestPostion;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68d2      	ldr	r2, [r2, #12]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	pTIMHandle->pTIMx->EGR |= (1 << 0);//enables the UG bit
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	615a      	str	r2, [r3, #20]

	pTIMHandle->pTIMx->CR1 |= (1 << 0); //enables the Counter
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0201 	orr.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]

}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <ServoAngle>:

void ServoAngle(TIM2_5_RegDef_t *pTIMx, uint32_t Angle, uint8_t Channel)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	71fb      	strb	r3, [r7, #7]
	uint32_t DutyCycle = (Angle*1.188)+77;
 800171e:	68b8      	ldr	r0, [r7, #8]
 8001720:	f7fe ffce 	bl	80006c0 <__aeabi_ui2d>
 8001724:	a31b      	add	r3, pc, #108	; (adr r3, 8001794 <ServoAngle+0x84>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fd5d 	bl	80001e8 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <ServoAngle+0x80>)
 800173c:	f7fe fe84 	bl	8000448 <__adddf3>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff f834 	bl	80007b4 <__aeabi_d2uiz>
 800174c:	4603      	mov	r3, r0
 800174e:	617b      	str	r3, [r7, #20]
	if(Channel == 1)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d103      	bne.n	800175e <ServoAngle+0x4e>
	{
		pTIMx->CCR1 = DutyCycle;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
	else if(Channel == 4)
	{
		pTIMx->CCR4 = DutyCycle;
	}

}
 800175c:	e013      	b.n	8001786 <ServoAngle+0x76>
	else if(Channel == 2)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d103      	bne.n	800176c <ServoAngle+0x5c>
		pTIMx->CCR2 = DutyCycle;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
}
 800176a:	e00c      	b.n	8001786 <ServoAngle+0x76>
	else if(Channel == 3)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d103      	bne.n	800177a <ServoAngle+0x6a>
		pTIMx->CCR3 = DutyCycle;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001778:	e005      	b.n	8001786 <ServoAngle+0x76>
	else if(Channel == 4)
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d102      	bne.n	8001786 <ServoAngle+0x76>
		pTIMx->CCR4 = DutyCycle;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40534000 	.word	0x40534000
 8001794:	49ba5e35 	.word	0x49ba5e35
 8001798:	3ff3020c 	.word	0x3ff3020c

0800179c <__libc_init_array>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	4d0d      	ldr	r5, [pc, #52]	; (80017d4 <__libc_init_array+0x38>)
 80017a0:	4c0d      	ldr	r4, [pc, #52]	; (80017d8 <__libc_init_array+0x3c>)
 80017a2:	1b64      	subs	r4, r4, r5
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	2600      	movs	r6, #0
 80017a8:	42a6      	cmp	r6, r4
 80017aa:	d109      	bne.n	80017c0 <__libc_init_array+0x24>
 80017ac:	4d0b      	ldr	r5, [pc, #44]	; (80017dc <__libc_init_array+0x40>)
 80017ae:	4c0c      	ldr	r4, [pc, #48]	; (80017e0 <__libc_init_array+0x44>)
 80017b0:	f000 f818 	bl	80017e4 <_init>
 80017b4:	1b64      	subs	r4, r4, r5
 80017b6:	10a4      	asrs	r4, r4, #2
 80017b8:	2600      	movs	r6, #0
 80017ba:	42a6      	cmp	r6, r4
 80017bc:	d105      	bne.n	80017ca <__libc_init_array+0x2e>
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c4:	4798      	blx	r3
 80017c6:	3601      	adds	r6, #1
 80017c8:	e7ee      	b.n	80017a8 <__libc_init_array+0xc>
 80017ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ce:	4798      	blx	r3
 80017d0:	3601      	adds	r6, #1
 80017d2:	e7f2      	b.n	80017ba <__libc_init_array+0x1e>
 80017d4:	080017fc 	.word	0x080017fc
 80017d8:	080017fc 	.word	0x080017fc
 80017dc:	080017fc 	.word	0x080017fc
 80017e0:	08001800 	.word	0x08001800

080017e4 <_init>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	bf00      	nop
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr

080017f0 <_fini>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	bf00      	nop
 80017f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f6:	bc08      	pop	{r3}
 80017f8:	469e      	mov	lr, r3
 80017fa:	4770      	bx	lr
